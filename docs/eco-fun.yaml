openapi: 3.0.0
info:
  title: FastAPI
  version: 0.1.5
paths:
  /users/:
    get:
      tags:
        - Users
      summary: Get Users
      operationId: get_users_users__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CreateUser'
                type: array
                title: Response Get Users Users  Get
    post:
      tags:
        - Users
      summary: Create User
      operationId: create_user_users__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
        required: true
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CreateUser'
                type: array
                title: Response Create User Users  Post
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get User By Id
      operationId: get_user_by_id_users__id__get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            title: Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUser'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - Users
      summary: Delete User
      operationId: delete_user_users__id__delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            title: Id
      responses:
        '204':
          description: Successful Response
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
        - Users
      summary: Update User
      operationId: update_user_users__id__put
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            title: Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /marketplaces/:
    get:
      tags:
        - Marketplaces
      summary: Get Marketplaces
      operationId: get_marketplaces_marketplaces__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CreateMarketplace'
                type: array
                title: Response Get Marketplaces Marketplaces  Get
    post:
      tags:
        - Marketplaces
      summary: Create Marketplace
      operationId: create_marketplace_marketplaces__post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMarketplace'
        required: true
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CreateMarketplace'
                type: array
                title: Response Create Marketplace Marketplaces  Post
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /marketplaces/{id}:
    get:
      tags:
        - Marketplaces
      summary: Get Marketplace By Id
      operationId: get_marketplace_by_id_marketplaces__id__get
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            title: Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateMarketplace'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - Marketplaces
      summary: Delete Marketplace
      operationId: delete_marketplace_marketplaces__id__delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            title: Id
      responses:
        '204':
          description: Successful Response
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    put:
      tags:
        - Marketplaces
      summary: Update Marketplace
      operationId: update_marketplace_marketplaces__id__put
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            title: Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Marketplace'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Marketplace'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /:
    get:
      summary: Root
      operationId: root__get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
  /claim:
    post:
      summary: Claimticket
      description: Claims a ticket
      operationId: claimTicket_claim_post
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: string
            title: User Id
        - name: mplace_id
          in: query
          required: true
          schema:
            type: integer
            title: Mplace Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /mainScreen:
    get:
      summary: Mainscreen
      description: Returns info about user and tickets to redeem
      operationId: mainScreen_mainScreen_get
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
            title: Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MainScreen'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /verify:
    post:
      summary: Verifyphoto
      description: Veryfies if photo and the selected bin are matching
      operationId: verifyPhoto_verify_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyPhoto'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyPhotoResult'
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    Bin:
      type: string
      enum:
        - PAPER
        - GLASS
        - BIO
        - METAL_PLASTIC
        - MIXED
      title: Bin
    CreateMarketplace:
      properties:
        id:
          type: integer
          title: Id
        image:
          type: string
          title: Image
        title:
          type: string
          title: Title
        description:
          type: string
          title: Description
        price:
          type: integer
          title: Price
      type: object
      required:
        - id
        - image
        - title
        - description
        - price
      title: CreateMarketplace
    CreateUser:
      properties:
        id:
          type: string
          title: Id
        score:
          type: integer
          title: Score
      type: object
      required:
        - id
        - score
      title: CreateUser
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    MainScreen:
      properties:
        id:
          type: string
          title: Id
          example: example@gmail.com
        marketplaces:
          items: {}
          type: array
          title: Marketplaces
          example:
            - description: Description
              id: 1
              image: https://example.com/image.jpg
              price: 100
              title: Title
        pointsAmount:
          type: integer
          title: Pointsamount
          example: 1005
      type: object
      required:
        - id
        - marketplaces
        - pointsAmount
      title: MainScreen
    Marketplace:
      properties:
        id:
          type: integer
          title: Id
        image:
          type: string
          title: Image
        title:
          type: string
          title: Title
        description:
          type: string
          title: Description
        price:
          type: integer
          title: Price
      type: object
      required:
        - id
        - image
        - title
        - description
        - price
      title: Marketplace
    User:
      properties:
        id:
          type: string
          title: Id
        score:
          type: integer
          title: Score
      type: object
      required:
        - id
        - score
      title: User
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
    VerifyPhoto:
      properties:
        user_id:
          type: string
          title: User Id
          example: example@gmail.com
        binTypeGuess:
          $ref: '#/components/schemas/Bin'
        file:
          type: string
          title: File
      type: object
      required:
        - user_id
        - binTypeGuess
        - file
      title: VerifyPhoto
    VerifyPhotoPayload:
      properties:
        isBinTypeGuessCorrect:
          type: boolean
          title: Isbintypeguesscorrect
        pointsEarned:
          type: integer
          title: Pointsearned
          example: 2
        correctBinType:
          $ref: '#/components/schemas/Bin'
        notesFromAI:
          anyOf:
            - type: string
            - type: 'null'
          title: Notesfromai
          description: If wrong there will be an explanation why
          example: Oh no, your guess was wrong, you should use the PAPER bin.
      type: object
      required:
        - isBinTypeGuessCorrect
        - pointsEarned
        - correctBinType
      title: VerifyPhotoPayload
    VerifyPhotoResult:
      properties:
        status_code:
          type: integer
          title: Status Code
          default: 200
          example: 200
        payload:
          $ref: '#/components/schemas/VerifyPhotoPayload'
      type: object
      required:
        - payload
      title: VerifyPhotoResult
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://ecosort-d4827d1603c3.herokuapp.com/