/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export const Bin = {
    Paper: 'PAPER',
    Glass: 'GLASS',
    Bio: 'BIO',
    MetalPlastic: 'METAL_PLASTIC',
    Mixed: 'MIXED'
} as const;

export type Bin = typeof Bin[keyof typeof Bin];


/**
 * 
 * @export
 * @interface CreateMarketplace
 */
export interface CreateMarketplace {
    /**
     * 
     * @type {number}
     * @memberof CreateMarketplace
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CreateMarketplace
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof CreateMarketplace
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CreateMarketplace
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof CreateMarketplace
     */
    'price': number;
}
/**
 * 
 * @export
 * @interface CreateUser
 */
export interface CreateUser {
    /**
     * 
     * @type {string}
     * @memberof CreateUser
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof CreateUser
     */
    'score': number;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface LocationInner
 */
export interface LocationInner {
}
/**
 * 
 * @export
 * @interface MainScreen
 */
export interface MainScreen {
    /**
     * 
     * @type {string}
     * @memberof MainScreen
     */
    'id': string;
    /**
     * 
     * @type {Array<any>}
     * @memberof MainScreen
     */
    'marketplaces': Array<any>;
    /**
     * 
     * @type {number}
     * @memberof MainScreen
     */
    'pointsAmount': number;
}
/**
 * 
 * @export
 * @interface Marketplace
 */
export interface Marketplace {
    /**
     * 
     * @type {number}
     * @memberof Marketplace
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Marketplace
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof Marketplace
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Marketplace
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof Marketplace
     */
    'price': number;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'score': number;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<LocationInner>}
     * @memberof ValidationError
     */
    'loc': Array<LocationInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface VerifyPhoto
 */
export interface VerifyPhoto {
    /**
     * 
     * @type {string}
     * @memberof VerifyPhoto
     */
    'user_id': string;
    /**
     * 
     * @type {Bin}
     * @memberof VerifyPhoto
     */
    'binTypeGuess': Bin;
    /**
     * 
     * @type {string}
     * @memberof VerifyPhoto
     */
    'file': string;
}


/**
 * 
 * @export
 * @interface VerifyPhotoPayload
 */
export interface VerifyPhotoPayload {
    /**
     * 
     * @type {boolean}
     * @memberof VerifyPhotoPayload
     */
    'isBinTypeGuessCorrect': boolean;
    /**
     * 
     * @type {number}
     * @memberof VerifyPhotoPayload
     */
    'pointsEarned': number;
    /**
     * 
     * @type {Bin}
     * @memberof VerifyPhotoPayload
     */
    'correctBinType': Bin;
    /**
     * 
     * @type {string}
     * @memberof VerifyPhotoPayload
     */
    'notesFromAI'?: string | null;
}


/**
 * 
 * @export
 * @interface VerifyPhotoResult
 */
export interface VerifyPhotoResult {
    /**
     * 
     * @type {number}
     * @memberof VerifyPhotoResult
     */
    'status_code'?: number;
    /**
     * 
     * @type {VerifyPhotoPayload}
     * @memberof VerifyPhotoResult
     */
    'payload': VerifyPhotoPayload;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Claims a ticket
         * @summary Claimticket
         * @param {string} userId 
         * @param {number} mplaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        claimTicketClaimPost: async (userId: string, mplaceId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('claimTicketClaimPost', 'userId', userId)
            // verify required parameter 'mplaceId' is not null or undefined
            assertParamExists('claimTicketClaimPost', 'mplaceId', mplaceId)
            const localVarPath = `/claim`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (mplaceId !== undefined) {
                localVarQueryParameter['mplace_id'] = mplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns info about user and tickets to redeem
         * @summary Mainscreen
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainScreenMainScreenGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('mainScreenMainScreenGet', 'id', id)
            const localVarPath = `/mainScreen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Veryfies if photo and the selected bin are matching
         * @summary Verifyphoto
         * @param {VerifyPhoto} verifyPhoto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyPhotoVerifyPost: async (verifyPhoto: VerifyPhoto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'verifyPhoto' is not null or undefined
            assertParamExists('verifyPhotoVerifyPost', 'verifyPhoto', verifyPhoto)
            const localVarPath = `/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(verifyPhoto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Claims a ticket
         * @summary Claimticket
         * @param {string} userId 
         * @param {number} mplaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async claimTicketClaimPost(userId: string, mplaceId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.claimTicketClaimPost(userId, mplaceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.claimTicketClaimPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns info about user and tickets to redeem
         * @summary Mainscreen
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainScreenMainScreenGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MainScreen>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainScreenMainScreenGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.mainScreenMainScreenGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Veryfies if photo and the selected bin are matching
         * @summary Verifyphoto
         * @param {VerifyPhoto} verifyPhoto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyPhotoVerifyPost(verifyPhoto: VerifyPhoto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyPhotoResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyPhotoVerifyPost(verifyPhoto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.verifyPhotoVerifyPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Claims a ticket
         * @summary Claimticket
         * @param {string} userId 
         * @param {number} mplaceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        claimTicketClaimPost(userId: string, mplaceId: number, options?: any): AxiosPromise<any> {
            return localVarFp.claimTicketClaimPost(userId, mplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns info about user and tickets to redeem
         * @summary Mainscreen
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainScreenMainScreenGet(id: string, options?: any): AxiosPromise<MainScreen> {
            return localVarFp.mainScreenMainScreenGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: any): AxiosPromise<any> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Veryfies if photo and the selected bin are matching
         * @summary Verifyphoto
         * @param {VerifyPhoto} verifyPhoto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyPhotoVerifyPost(verifyPhoto: VerifyPhoto, options?: any): AxiosPromise<VerifyPhotoResult> {
            return localVarFp.verifyPhotoVerifyPost(verifyPhoto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Claims a ticket
     * @summary Claimticket
     * @param {string} userId 
     * @param {number} mplaceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public claimTicketClaimPost(userId: string, mplaceId: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).claimTicketClaimPost(userId, mplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns info about user and tickets to redeem
     * @summary Mainscreen
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public mainScreenMainScreenGet(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).mainScreenMainScreenGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Veryfies if photo and the selected bin are matching
     * @summary Verifyphoto
     * @param {VerifyPhoto} verifyPhoto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public verifyPhotoVerifyPost(verifyPhoto: VerifyPhoto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).verifyPhotoVerifyPost(verifyPhoto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * MarketplacesApi - axios parameter creator
 * @export
 */
export const MarketplacesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Marketplace
         * @param {CreateMarketplace} createMarketplace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMarketplaceMarketplacesPost: async (createMarketplace: CreateMarketplace, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMarketplace' is not null or undefined
            assertParamExists('createMarketplaceMarketplacesPost', 'createMarketplace', createMarketplace)
            const localVarPath = `/marketplaces/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMarketplace, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Marketplace
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMarketplaceMarketplacesIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMarketplaceMarketplacesIdDelete', 'id', id)
            const localVarPath = `/marketplaces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Marketplace By Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketplaceByIdMarketplacesIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMarketplaceByIdMarketplacesIdGet', 'id', id)
            const localVarPath = `/marketplaces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Marketplaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketplacesMarketplacesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/marketplaces/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Marketplace
         * @param {number} id 
         * @param {Marketplace} marketplace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMarketplaceMarketplacesIdPut: async (id: number, marketplace: Marketplace, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateMarketplaceMarketplacesIdPut', 'id', id)
            // verify required parameter 'marketplace' is not null or undefined
            assertParamExists('updateMarketplaceMarketplacesIdPut', 'marketplace', marketplace)
            const localVarPath = `/marketplaces/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(marketplace, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MarketplacesApi - functional programming interface
 * @export
 */
export const MarketplacesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MarketplacesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Marketplace
         * @param {CreateMarketplace} createMarketplace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMarketplaceMarketplacesPost(createMarketplace: CreateMarketplace, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateMarketplace>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMarketplaceMarketplacesPost(createMarketplace, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketplacesApi.createMarketplaceMarketplacesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Marketplace
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMarketplaceMarketplacesIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMarketplaceMarketplacesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketplacesApi.deleteMarketplaceMarketplacesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Marketplace By Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMarketplaceByIdMarketplacesIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateMarketplace>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMarketplaceByIdMarketplacesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketplacesApi.getMarketplaceByIdMarketplacesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Marketplaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMarketplacesMarketplacesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateMarketplace>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMarketplacesMarketplacesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketplacesApi.getMarketplacesMarketplacesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Marketplace
         * @param {number} id 
         * @param {Marketplace} marketplace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMarketplaceMarketplacesIdPut(id: number, marketplace: Marketplace, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Marketplace>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMarketplaceMarketplacesIdPut(id, marketplace, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['MarketplacesApi.updateMarketplaceMarketplacesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * MarketplacesApi - factory interface
 * @export
 */
export const MarketplacesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MarketplacesApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Marketplace
         * @param {CreateMarketplace} createMarketplace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMarketplaceMarketplacesPost(createMarketplace: CreateMarketplace, options?: any): AxiosPromise<Array<CreateMarketplace>> {
            return localVarFp.createMarketplaceMarketplacesPost(createMarketplace, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Marketplace
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMarketplaceMarketplacesIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteMarketplaceMarketplacesIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Marketplace By Id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketplaceByIdMarketplacesIdGet(id: number, options?: any): AxiosPromise<CreateMarketplace> {
            return localVarFp.getMarketplaceByIdMarketplacesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Marketplaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMarketplacesMarketplacesGet(options?: any): AxiosPromise<Array<CreateMarketplace>> {
            return localVarFp.getMarketplacesMarketplacesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Marketplace
         * @param {number} id 
         * @param {Marketplace} marketplace 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMarketplaceMarketplacesIdPut(id: number, marketplace: Marketplace, options?: any): AxiosPromise<Marketplace> {
            return localVarFp.updateMarketplaceMarketplacesIdPut(id, marketplace, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MarketplacesApi - object-oriented interface
 * @export
 * @class MarketplacesApi
 * @extends {BaseAPI}
 */
export class MarketplacesApi extends BaseAPI {
    /**
     * 
     * @summary Create Marketplace
     * @param {CreateMarketplace} createMarketplace 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplacesApi
     */
    public createMarketplaceMarketplacesPost(createMarketplace: CreateMarketplace, options?: RawAxiosRequestConfig) {
        return MarketplacesApiFp(this.configuration).createMarketplaceMarketplacesPost(createMarketplace, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Marketplace
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplacesApi
     */
    public deleteMarketplaceMarketplacesIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return MarketplacesApiFp(this.configuration).deleteMarketplaceMarketplacesIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Marketplace By Id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplacesApi
     */
    public getMarketplaceByIdMarketplacesIdGet(id: number, options?: RawAxiosRequestConfig) {
        return MarketplacesApiFp(this.configuration).getMarketplaceByIdMarketplacesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Marketplaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplacesApi
     */
    public getMarketplacesMarketplacesGet(options?: RawAxiosRequestConfig) {
        return MarketplacesApiFp(this.configuration).getMarketplacesMarketplacesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Marketplace
     * @param {number} id 
     * @param {Marketplace} marketplace 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MarketplacesApi
     */
    public updateMarketplaceMarketplacesIdPut(id: number, marketplace: Marketplace, options?: RawAxiosRequestConfig) {
        return MarketplacesApiFp(this.configuration).updateMarketplaceMarketplacesIdPut(id, marketplace, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create User
         * @param {CreateUser} createUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsersPost: async (createUser: CreateUser, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUser' is not null or undefined
            assertParamExists('createUserUsersPost', 'createUser', createUser)
            const localVarPath = `/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete User
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsersIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUserUsersIdDelete', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User By Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByIdUsersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserByIdUsersIdGet', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersUsersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update User
         * @param {string} id 
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUsersIdPut: async (id: string, user: User, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUserUsersIdPut', 'id', id)
            // verify required parameter 'user' is not null or undefined
            assertParamExists('updateUserUsersIdPut', 'user', user)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create User
         * @param {CreateUser} createUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserUsersPost(createUser: CreateUser, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserUsersPost(createUser, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.createUserUsersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete User
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserUsersIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserUsersIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.deleteUserUsersIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get User By Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByIdUsersIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByIdUsersIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getUserByIdUsersIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersUsersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersUsersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.getUsersUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update User
         * @param {string} id 
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserUsersIdPut(id: string, user: User, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserUsersIdPut(id, user, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.updateUserUsersIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary Create User
         * @param {CreateUser} createUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUsersPost(createUser: CreateUser, options?: any): AxiosPromise<Array<CreateUser>> {
            return localVarFp.createUserUsersPost(createUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete User
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserUsersIdDelete(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteUserUsersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User By Id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByIdUsersIdGet(id: string, options?: any): AxiosPromise<CreateUser> {
            return localVarFp.getUserByIdUsersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersUsersGet(options?: any): AxiosPromise<Array<CreateUser>> {
            return localVarFp.getUsersUsersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update User
         * @param {string} id 
         * @param {User} user 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserUsersIdPut(id: string, user: User, options?: any): AxiosPromise<User> {
            return localVarFp.updateUserUsersIdPut(id, user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary Create User
     * @param {CreateUser} createUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUserUsersPost(createUser: CreateUser, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).createUserUsersPost(createUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete User
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUserUsersIdDelete(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteUserUsersIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User By Id
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserByIdUsersIdGet(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserByIdUsersIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsersUsersGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsersUsersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update User
     * @param {string} id 
     * @param {User} user 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUserUsersIdPut(id: string, user: User, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUserUsersIdPut(id, user, options).then((request) => request(this.axios, this.basePath));
    }
}



